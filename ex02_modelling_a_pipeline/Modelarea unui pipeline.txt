Modelarea unui pipeline

* librarie care permite citirea/scrierea datelor (de) pe coada 
* 2 producatori de date: 1 ofera date despre temperatura si luminozitate, 1 ofera date despre numarul de persoane dintr-o camera
* 2 listeneri pentru date: 1 ofera un dashboard cu valorile curente in fiecare spatiu, 1 face analiza pe date pentru a optimiza costurile

Suntem devopsi, trebuie sa implementam pipeline-urile pentru build, ci, cd pentru toate environment-urile (dev, test, prod)

- properties
- liveness / readyness
- disaster recovery 
- application scaling
- threat modelling 






  Modelarea unui pipeline

* librarie care permite citirea/scrierea datelor (de) pe message broker
* 2 producatori de date: 1 ofera date despre temperatura si luminozitate, 1 ofera date despre numarul de persoane dintr-o camera
* 2 consumatori de date: 1 ofera un dashboard cu valorile curente in fiecare spatiu, 1 face analiza pe date pentru a optimiza costurile

Suntem devopsi, trebuie sa implementam pipeline-urile pentru build, ci, cd pentru toate environment-urile (dev, test, prod)



1. [deployment diagram] identificat resurse, tehnologii
- protocoale de comunicatie
- baze de date
- broker
- producatori, consumatori
- configuration files
=> disaster recovery

2. [Use case diagram] Analizam medii:
- in test: ruleaza teste automate => sterilizarea mediului de test
- resurse diferite (ram, proc, etc) => configuratie diferita
- servicii auxiliare similare intre medii 
- mock-uri in dev/test vs prod => dev/test au nevoie de aplicatii suplimentare care sa genereze date
- trigger pentru deployment intre faze => actori, manual vs. automat


3. [Activity diagram / State diagram / Sequence diagram] Do it!
- version bump
- build (compile vs. package) => artefact building
- unit tests
- static code analysis
- push artefact to artefact repository
- deployment to dev (copy artefact and configs, apply (rolling) update, start apps, check for liveness & readyness)
- acceptance tests
- deployment to test
- integration tests
- deployment to prod
